/**
 * @format
 */

const p = '[i Пакет]';
const pl = '[i Пакет/Локально]';
const d = '[i Директория]';
const s = '[i Один]';
const r = '[r Реализация]';

export const D = {
  // Директория 1 уровень
  '\n├── build': `${d} Готовый бандл приложения, 100% работоспособность, раздача nginx`,
  '\n├── builder': `${p}${d}[? CRA] Сборщик, внутри модули и конфиги для окружений`,
  '\n│...├── loaders': `${d} Загрузчики сборщика`,
  '\n│...└── plugins': `${d} Плагины сборщика`,
  '\n├── builder': `${p}${d}[? CRA] Сборщик`,
  '\n├── cli': `${p}${d} для консольных программ для проекта/экосистемы проекта`,
  '\n│...├── docs': `cli для автоматизации создания документации`,
  '\n│...├──generator': `cli для генерации компонентов проекта`,
  '\n├── config': `Настройка для экосистемы проекта не использующееся в проде`,
  '\n├── docs': `${pl} Документация проекта`,
  '\n├── .github': `${p} Скрипты для CI/CD`,
  '\n├── public': `${d} для статических редко изменяемых файлов (не используется в сборке)`,
  '\n├── reports': `${d} для отчетов для ESLint, Jest`,
  '\n├── src': `${d} со всеми исходниками для полноценной сборки проекта`,
  '\n│...├── api': `${d} для доступа API`,
  '\n│...│...├── Ingredients': `${r} Конкретная сущность бэка`,
  '\n│...│...│...├── entity.ts': `${r} Конкретная сущность`,
  '\n│...│...│...├── format.ts': `${r} Методы для преобразования (форматирования) raw данных`,
  '\n│...│...│...├── resolver.ts': `${r} Методы для доступа к endpoint сущности бэка`,
  '\n│...├── assets': `${d} для ресурсов используемых по всему приложению (шрифты, иконки)`,
  '\n│...├── components': `${d} для чистых компонентов`,
  '\n│...│...├── App': `${s}${r} Особый компонент для оборачивания приложения в глобальные HOC, подключение плагинов`,
  '\n│...├── constants': `${d} для констант проекта, настройки API, LS, теги, флаги, версии`,
  '\n│...├── content': `[? Перенести в фичу]${d} для `,
  '\n│...├── enums': `${d} Для создания статичных енумов "зашитые на бэке"`,
  '\n│...├── features': `${d} для фичей (реализация самостоятельного блока с бизнес логикой)`,
  '\n│...│...└── ContainerIngredientList': `${d}${r} конкретная реализация фичи`,
  '\n│...│...├── service': `${d}${r} конкретная реализация сервиса для фичи (стор + бизнес логика)`,
  '\n│...│.......│...├── hooks.ts': `${r} Хук для получения данных из стора в асинхронном стиле (со сменой статуса)`,
  '\n│...│.......│...├── selectors.ts': `${r} Селекторы для кэшированной выборки из стора`,
  '\n│...│.......│...├── slice.ts': `${r} Описание стора (экшены + редюсеры)`,
  '\n│...│.......│...├── state.ts': `${r} Начальное состояние стора`,
  '\n│...│.......│...├── thunk.ts': `${r} Асинхронные экшены`,
  '\n│...│.......│...└── types.ts': `${r} Типизация стора`,
  '\n│...│.......├── ContainerIngredientList.tsx': `${r} Верстка компонента`,
  '\n│...│.......├── index.ts': `${r} Реэкспорт фичи`,
  '\n│...│.......├── styles.module.css': `${r} Стили фичи/компоенета`,
  '\n│...│.......└── types.ts': `${r} Типизация фичи/компонента`,
  '\n│...├── forms': `${d}[? Необходимость]? Где хранить схему валидации?]`,
  '\n│...├── hooks': `${d} Для глобальных хуков (используется во всем приложении)`,
  '\n│...├── layouts': `${d} Для "оберток" страниц`,
  '\n│...├── pages': `${d} Для страниц`,
  '\n│...├── plugins': `${d} Для инициализации вендорных решений (либы, плагины, расширений)`,
  '\n│...├── router': `${d} Клиентский роутинг`,
  '\n│...│...├── Router.tsx': `${r}${s} Компонент для роутинга (switch)`,
  '\n│...│...├── routes.tsx': `${r}${s} Коллекция путей`,
  '\n│...├── services': `ХХХХХХХХХ`,
  '\n│...├── store': `${d} Настройка глобального стора`,
  '\n│...│...├── global': `${d} Части стора используемые на любом уровне приложения`,
  '\n│...│...│...├── actions': `${d}${r} глобальные экшены`,
  '\n│...│...│...└── middleware': `${d}${r} глобальные усилителей`,
  '\n│...│...├── middlewares.ts': `${r}${s} Все усилители стора`,
  '\n│...│...├── reducer.ts': `${r}${s} Корневой редюсер (rootReduce)`,
  '\n│...│...├── services.ts': `${r}${s} Точка входа для всех RTK Query`,
  '\n│...│...└── store.ts': `${r}${s} Точка входа в стор`,
  '\n│...├── stories': `${d} Сторисы для компонентов из внешних либ или для историй сгруппированы компонентов`,
  '\n│...├── styles': `${d} Глобальные стили и темизация`,
  '\n│...├── types': `${d} Глобальные типы`,
  '\n│...├── utils': `${d} Глобальные утилити функций`,
  '\n│...├── index.tsx': `${r}${s} Точка входа приложения, монтирование в DOM`,
  '\n 1ХХХХХХХХХ': `ХХХХХХХХХ`,
  '\n 1ХХХХХХХХХ': `ХХХХХХХХХ`,
  '\n 1ХХХХХХХХХ': `ХХХХХХХХХ`,
  '\n 1ХХХХХХХХХ': `ХХХХХХХХХ`,
  '\n 1ХХХХХХХХХ': `ХХХХХХХХХ`,
  '\n 1ХХХХХХХХХ': `ХХХХХХХХХ`,

  // Директория любой уровень
  __tests__: `${d} для тестов`,
  __mocks__: `${d} для моков`,

  // ФАЙЛЫ
  '.browserslistrc': `Список поддерживаемых браузеров`,

  '.editorconfig': `Настройки для IDE`,
  '.prettierrc': `Настройки форматтера Рrettier`,
  '.prettierignore': `Настройки игнора Рrettier`,
  '.eslintrc': `Настройки для ESLint`,
  '.eslintignore': `Список для игнорирования файлов ESLint`,

  '.gitattributes': `Настройки Git`,
  '.gitignore': `Список для игнорирования файлов Git`,

  '.env': `Переменные окружения (общие)`,
  '.env.production': `Переменные окружения (прод)`,

  '.npmrc': `Настройки NPM`,
  '.nvmrc': `Версия NODE.js`,

  '.stylelintignore': `Настройки Stylelint`,
  '.stylelintrc': `Список для игнорирования файлов Stylelint`,

  'jest.config.js': `Настройки для Jest`,
  'package.json': `Список зависимостей проекта и скрипты`,
  'package-lock.json': `Фиксация структуры зависимостей`,
  'postcss.config.js': `Настройки Postcss`,

  'tsconfig.json': `Настройки TypeScript`,
  '.babelrc': `Настройки Babelrc`,

  'README.md': `Документация директории/проекта/модуля`,
};
